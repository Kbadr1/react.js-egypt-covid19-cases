{"version":3,"sources":["components/Count.js","components/Header.js","components/Chart.js","App.js","serviceWorker.js","index.js","images/flag.jpg"],"names":["Header","data","confirmed","deaths","recovered","className","start","end","duration","separator","lastUpdate","href","src","flag","width","height","Date","toDateString","Chart","labels","datasets","backgroundColor","hoverBackgroundColor","App","useState","setData","useEffect","getData","axios","get","then","res","console","log","value","catch","err","Count","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.c9264222.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Header = ({ data: { confirmed, deaths, recovered } }) => {\r\n    return (\r\n        <div className=\"Count row\">\r\n            <div className=\"count-box confirmed text-center col-12\">\r\n                <div className=\"count col-12\">\r\n                <h3><i className=\"fa fa-check\"></i> <CountUp start={0} end={confirmed} duration={3} separator=\",\" /></h3>\r\n                <h5>Total Confirmed Cases</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"count-box deaths text-center col-12\">\r\n                <div className=\"count col-12\">\r\n                <h3><i className=\"fa fa-exclamation\"></i> <CountUp start={0} end={deaths} duration={3} separator=\",\" /></h3>\r\n                <h5>Total Deaths</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"count-box recovered text-center col-12 \">\r\n                <div className=\"count col-12\">\r\n                <h3><i className=\"fa fa-heartbeat\"></i> <CountUp start={0} end={recovered} duration={3} separator=\",\" /></h3>\r\n                <h5>Total recovered</h5>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport flag from \"../images/flag.jpg\";\r\nimport CountUp from \"react-countup\";\r\n\r\nconst Header = ({ data: { lastUpdate }}) => {\r\n    return (\r\n        <div className=\"header mb-5\">\r\n            <h1 className=\"covid text-center \">COVID-19</h1>\r\n            <h1 className=\"navbar-brand\" href=\"#\">\r\n                <img src={flag} width=\"50\" height=\"30\" className=\"d-inline-block align-top mr-3\"/>\r\n                Egypt\r\n            </h1>\r\n            <p> Population: <CountUp start={0} end={102334404} duration={3} separator=\",\" /></p>\r\n            <hr/>\r\n            <p className=\"date\">Last updated: {new Date(lastUpdate).toDateString()}</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport { Pie } from \"react-chartjs-2\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered } }) => {\r\n    return (\r\n        <div className=\"chart\">\r\n            <Pie\r\n                data={{\r\n                    labels: [\"Confirmed\", \"Deaths\", \"recovered\"],\r\n                    datasets: [{\r\n                        backgroundColor: [\r\n                            \"rgba(0, 128, 0, 0.9)\",\r\n                            \"rgba(255, 0, 0, 0.9)\",\r\n                            \"rgba(0, 0, 255, 0.9)\"\r\n                        ],\r\n                        hoverBackgroundColor: [\r\n                            'rgba(0, 128, 0, 1)',\r\n                            'rgba(255, 0, 0, 1)',\r\n                            'rgba(0, 0, 255, 1)'\r\n                        ],\r\n                        data: [confirmed, deaths, recovered]\r\n                    }]\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport axios from \"axios\";\nimport Count from './components/Count';\nimport Header from './components/Header';\nimport Chart from \"./components/Chart\";\n\n\nfunction App() {\n\n    const [data, setData] = useState({\n        confirmed: null,\n        deaths: null,\n        recovered: null,\n        lastUpdate: null\n    });\n\n    useEffect(() => {\n        getData();\n    },[])\n\n    const getData = () => {\n        axios.get(`https://covid19.mathdro.id/api/countries/egypt`)\n            .then(res => {\n                console.log(res.data);\n                const { confirmed, deaths, recovered, lastUpdate } = res.data;\n                setData({\n                    confirmed: confirmed.value,\n                    deaths: deaths.value,\n                    recovered: recovered.value,\n                    lastUpdate: lastUpdate\n                });\n            })\n            .catch(err => console.log(err));\n    }    \n\n    return (\n        <div className=\"App container\">\n            <Header data={data}/>\n            <div className=\"row count-chart\">\n                <div className=\"col-lg-4\">\n                    <Count data={data}/>\n                </div>\n                <div className=\"col-lg-8\">\n                    <Chart data={data} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/flag.218f2152.jpg\";"],"sourceRoot":""}